{"version":3,"sources":["TopMenu.js","Header.js","MainContent.js","FooterMenu.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["TopMenu","props","class","onClick","console","log","item","clickedItem1","Header","clickedItemTopMenu","data","clickedItem2","topMenu","map","el","key","MainContent","mainContent","FooterMenu","clickedItem3","Footer","clickedItemFooterMenu","clickedItem4","footerMenu","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yNAqBeA,MAlBf,SAAiBC,GAOf,OACE,yBAAKC,MAAM,UACT,6BACE,wBAAIA,MAAM,cAAcC,QARd,WACdC,QAAQC,IAAI,uBAAyBJ,EAAMK,KAAO,KAClDL,EAAMM,aAAaN,EAAMK,QAOlBL,EAAMK,SCOFE,MAhBf,SAAgBP,GAEd,IAAMQ,EAAqB,SAACC,GAC1BN,QAAQC,IAAI,cAAgBK,EAAO,qCACnCT,EAAMU,aAAaD,IAGrB,OACE,yBAAKR,MAAM,UACT,yBAAKA,MAAM,OACND,EAAMW,QAAQC,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAASC,IAAKD,EAAIR,KAAMQ,EAAIP,aAAcE,UCD9DO,MAXf,SAAqBf,GAEnB,OACE,yBAAKC,MAAM,OACT,yBAAKA,MAAM,eACT,2BAAID,EAAMgB,gBCaHC,MAlBf,SAAoBjB,GAOlB,OACE,yBAAKC,MAAM,UACT,6BACE,wBAAIA,MAAM,iBAAiBC,QARjB,WACdC,QAAQC,IAAI,0BAA4BJ,EAAMK,KAAO,KACrDL,EAAMkB,aAAalB,EAAMK,QAOlBL,EAAMK,SCMFc,MAff,SAAgBnB,GAEd,IAAMoB,EAAwB,SAACX,GAC7BT,EAAMqB,aAAaZ,IAGrB,OACE,yBAAKR,MAAM,UACT,yBAAKA,MAAM,OACND,EAAMsB,WAAWV,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAYC,IAAKD,EAAIR,KAAMQ,EAAIK,aAAcE,UCyDpEG,MA/Df,WAmDE,OACE,yBAAKtB,MAAM,mBACT,kBAAC,EAAD,CAAQU,QAnDI,CACd,QACA,OACA,QACA,WACA,WACA,eACA,QACA,YACA,SA0C4BD,aAZJ,SAACD,GACzBN,QAAQC,IAAI,cAAgBK,EAAO,mCACnCN,QAAQC,IAAI,QAWV,6BACA,kBAAC,EAAD,CAAaY,YA1CI,47BA2CjB,kBAAC,EAAD,CAAaA,YAhCI,2qBAiCjB,6BACA,kBAAC,EAAD,CAAQM,WA1BO,CACjB,QACA,OACA,cACA,cACA,WACA,QACA,QAmBkCD,aAZV,SAACZ,GACzBN,QAAQC,IAAI,IAAMK,EAAO,0BACzBN,QAAQC,IAAI,UC5CIoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.10254def.chunk.js","sourcesContent":["\nimport React from 'react';\n\nfunction TopMenu(props) {\n\n  const clicked = () => {\n    console.log('Top click on item: \"' + props.item + '\"');\n    props.clickedItem1(props.item);\n  }\n\n  return (\n    <div class=\"col-sm\">\n      <div>\n        <h5 class=\"topMenuItem\" onClick={clicked}>\n          {props.item}\n        </h5>\n      </div>\n    </div>\n  );\n}\n\nexport default TopMenu;\n","\nimport React from 'react';\n\nimport TopMenu from './TopMenu'\n\nfunction Header(props) {\n\n  const clickedItemTopMenu = (data) => {\n    console.log('Top click \"' + data + '\" propagated 1 level up to Header');\n    props.clickedItem2(data);\n  }\n\n  return (\n    <div class=\"header\">\n      <div class=\"row\">\n          {props.topMenu.map(el => <TopMenu key={el} item={el} clickedItem1={clickedItemTopMenu}/>)}\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","\nimport React from 'react';\n\nfunction MainContent(props) {\n\n  return (\n    <div class=\"row\">\n      <div class=\"mainContent\">\n        <p>{props.mainContent}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default MainContent;\n","\nimport React from 'react';\n\nfunction FooterMenu(props) {\n\n  const clicked = () => {\n    console.log('Bottom click on item: \"' + props.item + '\"');\n    props.clickedItem3(props.item);\n  }\n\n  return (\n    <div class=\"col-sm\">\n      <div>\n        <h6 class=\"bottomMenuItem\" onClick={clicked}>\n          {props.item}\n        </h6>\n      </div>\n    </div>\n  );\n}\n\nexport default FooterMenu;\n","\nimport React from 'react';\n\nimport FooterMenu from \"./FooterMenu\";\n\nfunction Footer(props) {\n\n  const clickedItemFooterMenu = (data) => {\n    props.clickedItem4(data);\n  }\n\n  return (\n    <div class=\"footer\">\n      <div class=\"row\">\n          {props.footerMenu.map(el => <FooterMenu key={el} item={el} clickedItem3={clickedItemFooterMenu}/>)}\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","\nimport React from 'react';\n//import Content1 from './content1.json';\nimport './App.css';\nimport Header from './Header';\nimport MainContent from './MainContent';\nimport Footer from './Footer'\n\nfunction App() {\n\n  const topMenu = [\n    'Learn',\n    'Play',\n    'Ideas',\n    'Writings',\n    'Topology',\n    'Architecture',\n    'Music',\n    'Paintings',\n    'Dance'];\n\n  const mainContent1 = 'Plato (/ˈpleɪtoʊ/ PLAY-toe; Greek: Πλάτων Plátōn, pronounced [plá.tɔːn] in Classical Attic; ' +\n    '428/427 or 424/423 – 348/347 BC) was an Athenian philosopher during the Classical period in Ancient Greece, ' +\n    'founder of the Platonist school of thought, and the Academy, the first institution of higher learning in the ' +\n    'Western world.\\n' +\n    '\\n' +\n    'He is widely considered the pivotal figure in the history of Ancient Greek and Western philosophy, along with his ' +\n    'teacher, Socrates, and his most famous student, Aristotle. Plato has also often been cited as one of the founders ' +\n    'of Western religion and spirituality. The so-called Neoplatonism of philosophers like Plotinus and Porphyry ' +\n    'influenced Saint Augustine and thus Christianity. Alfred North Whitehead once noted: \"the safest general ' +\n    'characterization of the European philosophical tradition is that it consists of a series of footnotes to Plato.\"';\n\n  const mainContent2 = 'Silicon Valley is a region in the southern part of the San Francisco Bay Area in Northern ' +\n    'California that serves as a global center for high technology, innovation, venture capital, and social media. ' +\n    'It corresponds roughly to the geographical Santa Clara Valley. San Jose is the Valley\\'s largest city, the ' +\n    'third-largest in California, and the tenth-largest in the United States; other major Silicon Valley cities include ' +\n    'Sunnyvale, Santa Clara, Redwood City, Mountain View, Palo Alto, Menlo Park, and Cupertino. The San Jose' +\n    ' Metropolitan Area has the third-highest GDP per capita in the world (after Zurich, Switzerland and Oslo, Norway), ' +\n    'according to the Brookings Institution.';\n\n  const footerMenu = [\n    'About',\n    'Help',\n    'Participate',\n    'Discussions',\n    'Projects',\n    'Goals',\n    'Plan'];\n\n  const clickedItemHeader = (data) => {\n    console.log('Top click \"' + data + '\" propagated 2 levels up to App');\n    console.log('-');\n  }\n\n  const clickedItemFooter = (data) => {\n    console.log('\"' + data + '\" propagated to app.js');\n    console.log('-');\n  }\n\n  return (\n    <div class=\"container-fluid\">\n      <Header topMenu={topMenu} clickedItem2={clickedItemHeader}/>\n      <hr/>\n      <MainContent mainContent={mainContent1}/>\n      <MainContent mainContent={mainContent2}/>\n      <hr/>\n      <Footer footerMenu={footerMenu} clickedItem4={clickedItemFooter}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}